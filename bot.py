#!/usr/bin/env python3
"""
Yonote Notifications Bot
–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–∑ Yonote
"""

import os
import logging
import asyncio
import json
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any

import pytz
import aiohttp
import aiosqlite
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

from settings import NotificationSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
YONOTE_API_BASE = "https://app.yonote.ru/api"
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
DB_PATH = "yonote_bot.db"

class YonoteAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Yonote"""
    
    def __init__(self, api_token: str):
        self.api_token = api_token
        self.session = None
    
    async def _get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def _make_request(self, endpoint: str, data: dict = None) -> dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        session = await self._get_session()
        url = f"{YONOTE_API_BASE}/{endpoint}"
        
        headers = {
            'Authorization': f'Bearer {self.api_token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        try:
            async with session.post(url, json=data or {}, headers=headers) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    logger.error(f"API request failed: {resp.status} - {await resp.text()}")
                    return None
        except Exception as e:
            logger.error(f"API request error: {e}")
            return None
    
    async def get_auth_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return await self._make_request("auth.info")
    
    async def get_events(self, limit: int = 50, offset: int = 0) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        return await self._make_request("events.list", {
            "limit": limit,
            "offset": offset
        })
    
    async def get_document_info(self, document_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        return await self._make_request("documents.info", {
            "id": document_id
        })
    
    async def get_comments_list(self, document_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        return await self._make_request("comments.list", {
            "entityId": document_id
        })
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = DB_PATH):
        self.db_path = db_path
    
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    yonote_token TEXT,
                    notifications_enabled BOOLEAN DEFAULT 1,
                    last_event_id TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            await db.commit()
    
    async def save_user_token(self, user_id: int, token: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                INSERT OR REPLACE INTO users (user_id, yonote_token) 
                VALUES (?, ?)
            """, (user_id, token))
            await db.commit()
    
    async def get_user_token(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT yonote_token FROM users WHERE user_id = ?", 
                (user_id,)
            ) as cursor:
                row = await cursor.fetchone()
                return row[0] if row else None
    
    async def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT user_id, yonote_token, notifications_enabled, last_event_id FROM users"
            ) as cursor:
                rows = await cursor.fetchall()
                return [
                    {
                        'user_id': row[0],
                        'yonote_token': row[1],
                        'notifications_enabled': bool(row[2]),
                        'last_event_id': row[3]
                    }
                    for row in rows
                ]
    
    async def update_notifications_enabled(self, user_id: int, enabled: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                UPDATE users SET notifications_enabled = ? WHERE user_id = ?
            """, (enabled, user_id))
            await db.commit()
    
    async def update_last_event_id(self, user_id: int, event_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                UPDATE users SET last_event_id = ? WHERE user_id = ?
            """, (event_id, user_id))
            await db.commit()
    
    async def delete_user(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
            await db.commit()

class YonoteBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.app = None
        self.db = Database()
        self.settings = NotificationSettings()
        self.scheduler = AsyncIOScheduler()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token = await self.db.get_user_token(user_id)
        
        if token:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –í–∞—à–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ Yonote —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.\n\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö, "
                "–≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∞–≤—Ç–æ—Ä–æ–º.",
                reply_markup=self._get_main_menu()
            )
        else:
            keyboard = [[InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", callback_data="connect")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Yonote.\n\n"
                "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
                "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n\n"
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å "
                "–∞–≤—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∞–≤—Ç–æ—Ä–æ–º.",
                reply_markup=reply_markup
            )
    
    async def connect_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üîë –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Yonote:\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫: https://app.yonote.ru/settings\n"
            "2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª 'API —Ç–æ–∫–µ–Ω—ã'\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "‚ö†Ô∏è –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        context.user_data['waiting_for_token'] = True
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if context.user_data.get('waiting_for_token'):
            await self._handle_token_input(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
                reply_markup=self._get_main_menu()
            )
    
    async def _handle_token_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
        token = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
        await update.message.delete()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        api = YonoteAPI(token)
        auth_info = await api.get_auth_info()
        
        if auth_info and auth_info.get('ok'):
            # –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            await self.db.save_user_token(user_id, token)
            context.user_data['waiting_for_token'] = False
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
            try:
                for i in range(20):
                    try:
                        await context.bot.delete_message(
                            chat_id=update.effective_chat.id,
                            message_id=update.message.message_id - i
                        )
                    except:
                        pass
            except:
                pass
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                     "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–∑ Yonote.",
                reply_markup=self._get_main_menu()
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
        await api.close()
    
    async def settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        notifications_enabled = await self.settings.are_notifications_enabled(user_id)
        
        keyboard = []
        
        if notifications_enabled:
            keyboard.append([InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")])
        else:
            disabled_until = await self.settings.get_disabled_until(user_id)
            if disabled_until:
                time_left = disabled_until - datetime.now()
                hours_left = int(time_left.total_seconds() / 3600)
                minutes_left = int((time_left.total_seconds() % 3600) / 60)
                
                if hours_left > 0:
                    time_text = f"{hours_left}—á {minutes_left}–º"
                else:
                    time_text = f"{minutes_left}–º"
                
                keyboard.append([InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_notifications")])
                status_text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\nüîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–æ—Å—Ç–∞–ª–æ—Å—å: {time_text})"
            else:
                keyboard.append([InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_notifications")])
                status_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\nüîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", callback_data="change_workspace")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:" if notifications_enabled else status_text
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup
        )
    
    async def disable_notifications_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –≤—Ä–µ–º—è"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("1 —á–∞—Å", callback_data="disable_1h")],
            [InlineKeyboardButton("4 —á–∞—Å–∞", callback_data="disable_4h")],
            [InlineKeyboardButton("24 —á–∞—Å–∞", callback_data="disable_24h")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîï –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?",
            reply_markup=reply_markup
        )
    
    async def change_workspace_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–º–µ–Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        await self.db.delete_user(user_id)
        
        keyboard = [[InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", callback_data="connect")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîÑ –¢–µ–∫—É—â–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n\n"
            "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:",
            reply_markup=reply_markup
        )
    
    async def back_to_main_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self._get_main_menu()
        )
    
    async def disable_time_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –≤—Ä–µ–º—è"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        user_id = update.effective_user.id
        
        hours_map = {
            'disable_1h': 1,
            'disable_4h': 4,
            'disable_24h': 24
        }
        
        if callback_data in hours_map:
            hours = hours_map[callback_data]
            await self.settings.disable_notifications(user_id, hours)
            
            time_text = f"{hours} —á–∞—Å{'–∞' if hours in [2, 3, 4] else '–æ–≤' if hours > 4 else ''}"
            
            await query.edit_message_text(
                f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ {time_text}.\n\n"
                f"–û–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—Ç—Å—è —á–µ—Ä–µ–∑ {time_text}.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
    
    async def enable_notifications_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        await self.settings.enable_notifications(user_id)
        
        await query.edit_message_text(
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!",
            reply_markup=self._get_main_menu()
        )
    
    def _get_main_menu(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [[InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]]
        return InlineKeyboardMarkup(keyboard)
    
    async def check_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        users = await self.db.get_all_users()
        
        for user in users:
            if not user['notifications_enabled']:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self.settings.are_notifications_enabled(user['user_id']):
                continue
                
            try:
                api = YonoteAPI(user['yonote_token'])
                events = await api.get_events(limit=20)
                
                if events and events.get('ok') and events.get('data'):
                    await self._process_events(user, events['data'], api)
                
                await api.close()
                
            except Exception as e:
                logger.error(f"Error checking notifications for user {user['user_id']}: {e}")
    
    async def _process_events(self, user: dict, events: list, api: YonoteAPI):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        last_event_id = user.get('last_event_id')
        new_events = []
        
        for event in events:
            if last_event_id and event.get('id') == last_event_id:
                break
            new_events.append(event)
        
        if not new_events:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–±—ã—Ç–∏—è
        if new_events:
            await self.db.update_last_event_id(user['user_id'], new_events[0]['id'])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comment_events = [e for e in new_events if self._is_comment_event(e)]
        
        for event in comment_events:
            await self._send_notification(user['user_id'], event, api)
    
    def _is_comment_event(self, event: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
        event_type = event.get('name', '').lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comment_events = [
            'comments.create',
            'comments.update', 
            'comments.delete',
            'comments.resolve',
            'comment.create',
            'comment.update',
            'comment.delete',
            'comment.resolve'
        ]
        return event_type in comment_events or any(keyword in event_type for keyword in ['comment', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'])
    
    async def _send_notification(self, user_id: int, event: dict, api: YonoteAPI):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            document_id = event.get('documentId')
            if not document_id:
                return
            
            doc_info = await api.get_document_info(document_id)
            if not doc_info or not doc_info.get('ok'):
                return
            
            document = doc_info.get('data', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∞–≤—Ç–æ—Ä–æ–º
            if not self._is_user_author_or_collaborator(event, document):
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = self._format_notification(event, document)
            
            await self.app.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"Error sending notification to user {user_id}: {e}")
    
    def _is_user_author_or_collaborator(self, event: dict, document: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∞–≤—Ç–æ—Ä–æ–º"""
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        return True
    
    def _format_notification(self, event: dict, document: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        event_time = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M")
        
        document_title = document.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        document_url = f"https://app.yonote.ru/doc/{document.get('id', '')}"
        
        actor_name = event.get('actor', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        event_name = event.get('name', '')
        
        if 'create' in event_name.lower():
            action = "—Å–æ–∑–¥–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        elif 'update' in event_name.lower():
            action = "–∏–∑–º–µ–Ω–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        elif 'delete' in event_name.lower():
            action = "—É–¥–∞–ª–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        elif 'resolve' in event_name.lower():
            action = "–∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        else:
            action = "–≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"
        
        message = f"""
üìÑ <b>{document_title}</b>

üë§ {actor_name} {action}

üïê {event_time} (–ú–°–ö)

üîó <a href="{document_url}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        comment_data = event.get('data', {})
        if isinstance(comment_data, dict) and comment_data.get('data'):
            comment_text = comment_data['data'][:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(comment_data['data']) > 200:
                comment_text += "..."
            message += f"\nüí¨ <i>{comment_text}</i>"
        
        return message.strip()
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.db.init_db()
        await self.settings.init_settings_table()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CallbackQueryHandler(self.connect_callback, pattern="connect"))
        self.app.add_handler(CallbackQueryHandler(self.settings_callback, pattern="settings"))
        self.app.add_handler(CallbackQueryHandler(self.disable_notifications_callback, pattern="disable_notifications"))
        self.app.add_handler(CallbackQueryHandler(self.change_workspace_callback, pattern="change_workspace"))
        self.app.add_handler(CallbackQueryHandler(self.back_to_main_callback, pattern="back_to_main"))
        self.app.add_handler(CallbackQueryHandler(self.disable_time_callback, pattern="^disable_[0-9]+h$"))
        self.app.add_handler(CallbackQueryHandler(self.enable_notifications_callback, pattern="enable_notifications"))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.scheduler.add_job(
            self.check_notifications,
            'interval',
            minutes=1,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            id='check_notifications'
        )
        self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        logger.info("Bot started successfully!")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        finally:
            await self.app.stop()
            self.scheduler.shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = YonoteBot()
    await bot.start_bot()

if __name__ == "__main__":
    asyncio.run(main()) 